#############################################################################################
# NOTE ALL PROPERTIES ARE LOADED DYNAMICALLY UPON FILE UPDATE - NO NEED TO RESTART SERVER
#############################################################################################
# GENERAL SYSTEM PROPERTIES
#############################################################################################

#LOGLEVEL may be NONE, LESS, MORE or ALL - Avoid using ALL

LOGLEVEL=NONE

# Beyond this max size, GaianDB will alternate between logging to gaiandb#0.log and gaiandb#1.log, switching every time the max is reached
# The initial gaiandb.log will not be lost.
LOGFILE_MAX_SIZE_MB=100

#ACCESS_CLUSTERS=MyClusterID

# Set this to true to internally use Table Functions instead of Derby's deprecated (but more capable) VTI interface - to obtain support for a problem.
#MANAGE_LTVIEWS_WITH_TABLE_FUNCTIONS=false

# Change your user id to safeguard your configuration against updates from others
# Ensure the user id defined here has an associated password defined in derby.properties, e.g. derby.user.gaiandb=passw0rd

GAIAN_NODE_USR=gaiandb
GAIAN_NODE_PWD=passw0rd

# The property ALLOW_SQL_API_CONFIGURATION allows you to manage your configuration through the SQL API.
# The API commands perform error checking and often set multiple properties per command.
# Before you enable this property, you may wish to prevent other people from also modifying your configuration through the
# SQL API by setting your own GAIAN_NODE_USR user id above; and then its associated password in the derby.properties file.
# As an example, the password for user id 'gaiandb' in derby.properties is set like this: derby.user.gaiandb=passw0rd

ALLOW_SQL_API_CONFIGURATION=TRUE

# The property ALLOW_PROPAGATED_WRITES allows propagated sub-queries (i.e. nested in GaianQuery() constructs) containing
# SQL insert/update/delete/create/drop operations or GaianDB procedures/functions including table functions and VTIs to be executed
# on your GaianDB node.
# This will affect any of the data sources you expose through logical tables (defined in this file).
# This will also allow remote management of this configuration file if property 'ALLOW_SQL_API_CONFIGURATION' is also set, and
# REGARDLESS of your node's user id and password - because connected nodes will have discovered these through the gaiandb connection protocol.
# Set this property if you want to allow other nodes to execute code on your node and change your data (and potentially also your node's configuration).

ALLOW_PROPAGATED_WRITES=TRUE

# MIN_DISCOVERED_CONNECTIONS is the number of connections this Gaian Node will seek to establish
# to other nodes using IP MULTICAST. The connection is maintained (in both directions) by
# whichever node establishes it. Connections maintained to us by other nodes do not reduce our count.
# Any connected nodes must have identical logical table column defs (though they may have more or less of them)
# for them to be federated with ours.

MIN_DISCOVERED_CONNECTIONS=2

#MAX_DISCOVERED_CONNECTIONS=10

#MAX_INBOUND_CONNECTION_THREADS=10

DISCOVERY_PORT=7777

# List of hostnames that this node will allow discovered connections to be established with.
# If ACCESS_HOSTS_PERMITTED is not set, then this GaianDB will connect to GaianDB nodes on any reachable host.
# If ACCESS_HOSTS_PERMITTED is set to a blank value, then GaianDB node discovery will be disabled.

#ACCESS_HOSTS_PERMITTED=<hostname1>,<host2>

# List of hostnames (i.e. the host part of the GaianDB nodeID) which are disallowed to establish a GaianDB
# connection with this node or run GaianDB queries against it.

#ACCESS_HOSTS_DENIED=<hostname1>,<host2>

# DISCOVERY_IP is the broadcast mask or multicast group address used to discover other reachable GaianDB nodes.
# If DISCOVERY_IP is not set, the default MULTICAST group address 230.255.255.255 is used.
# If DISCOVERY_IP is set to a blank value then GaianDB node discovery will be disabled.
# Broadcast messages can only reach machines within the domains which the local machine is itself a member of.
# Subnet broadcasts may reach further.
# Multicast messages may propagate beyond domain gateways if these were set up specifically for that purpose.
# For example, the DISCOVERY_IP variable may be used as:
# - A broadcast mask address: e.g. 255.255.255.255 for all machines in the local domains,
#   or 9.255.255.255 for all machines in the local domains with a 9.x.x.x address.
# - A multicast group address to seek out all nodes that also use that group ip address
#   To use multicast, use a common group address from the range 224.0.0.1 to 239.255.255.255
# - A unicast (1-to-1 broadcast) server address to only discover one potential node at that address.
#   Note that unicast messages are propagated on by domain gateways.

# Default setting for DISCOVERY_IP is the multicast address below (even when this property is commented out):
# To disable discovery, explicitly set this property to nothing, i.e: DISCOVERY_IP=

DISCOVERY_IP=230.255.255.255

# 127.255.255.255 tells GAIANDB to broadcast discovery messages only locally, discovering nodes running on diff ports.
#DISCOVERY_IP=127.255.255.255

# Use value 'BROADCAST_ALL' to broadcast on all network interfaces (using all broadcast masks listed at top of gaiandb.log)
#DISCOVERY_IP=BROADCAST_ALL

# MULTICAST_INTERFACES property only applies if DISCOVERY_IP designates a Multicast address, and it identifies the interfaces over which 
# multicast discovery will be performed. The property value must be a comma separated list of the IP addresses that the local host has 
# assigned for any of the network interfaces that should be used. By default, the default interface IP is used (as shown at startup in the log file).
# Use value 'ALL' to multicast on all network interfaces (when DISCOVERY_IP points to a multicast group ip)

MULTICAST_INTERFACES=ALL

#MULTICAST_INTERFACES=192.168.0.1

# Gateways for discovery into separate subnets - (gateways will forward on connection requests within their own subnets)

#DISCOVERY_GATEWAYS=<CSV LIST OF IP ADDRESSES>

# GAIAN_CONNECTIONS_CHECKER_HEARTBEAT_MS is the amount of time between periodic connection verification requests sent to connected nodes.
# It is also the maximum expected amount of time to receive responses to these requests from the connected nodes. The default is shown below.
# It is recommended to only increase this value in high-latency networks.
GAIAN_CONNECTIONS_CHECKER_HEARTBEAT_MS=5000

# Max propagation depth for queries - default is full flood - can also be overriden in a query, e.g:
# select * from new com.ibm.db2j.GaianTable('LT0', 'maxDepth=2') LT0ALIAS

#MAX_PROPAGATION=6

# Max size for pools of data sources, e.g. JDBC Connections or VTI objects.
# These are re-cycled when queries have finished with them.
# Default is 10, meaning that a node will not cache connections beyond a concurrent workload of 10 simultaneous queries.
# It will have to re-acquire connections for each new query beyond this limit.

#MAX_POOLSIZES=10

#############################################################################################
# LOGICAL TABLE DEFINITIONS: e.g. LT0, LT1, LT2; AND THEIR DATA SOURCES: DS0, DS1...
# Logical table defininition properties must have the '_DEF' suffix.
# Note that each logical table has hidden provenance columns tagged at the end of its columns list, these are:
# GAIAN_NODE VARCHAR(20), GAIAN_LEAF VARCHAR(50)
# To enable these, use the view that includes provenance columns for the logical table (this has an "_P" suffix) e.g:
# select * from LT0_P
# Alternatively, use the option 'with_provenance' in the argument list of a fully qualified query, e.g:
# select * from new com.ibm.db2j.GaianTable('LT0', 'with_provenance, maxDepth=3') LT0ALIAS
#
# Constant columns can also be defined for a logical table, e.g: TOWN:
# HRINFO_DEF=HEADCOUNT INT, SALARY DECIMAL
# HRINFO_CONSTANTS=TOWN VARCHAR(30) 'SOUTHAMPTON'
#############################################################################################

# NODE_CONSTANTS defines global constant columns that apply to all logical tables.
#NODE_CONSTANTS=NODEINDEX INT 1

LT0_DEF=LOCATION VARCHAR(30), MISC VARCHAR(30), NUMBER INTEGER

# Definition for a File data source DS0 federated by LT0
# Note <GAIAN_WORKSPACE> resolves to the value of Java system property 'derby.system.home', which can be set in launchGaianServer.bat(/.sh)
LT0_DS0_VTI=com.ibm.db2j.FileImport
LT0_DS0_ARGS=<GAIAN_WORKSPACE>/csvtestfiles/datafile.dat
LT0_DS0_OPTIONS=INMEMORY

# Column mappings (Note CSV columns in a file by default have physical names: COLUMN1, COLUMN2, ...)
# So this maps COLUMN2->LOCATION, COLUMN3->MISC, COLUMN1->NUMBER
LT0_DS0_C1=COLUMN2
LT0_DS0_C2=COLUMN3
LT0_DS0_C3=COLUMN1

# Example of an RDB data source, this one points to the 'DB2' connection property below (specifying DRIVER, URL, USR, PWD).
#LT0_DS2_CONNECTION=DB2
#LT0_DS2_URL=jdbc:db2://localhost:50000/sample
#LT0_DS2_TABLE=EMPLOYEE
#LT0_DS2_C1=FIRSTNME
#LT0_DS2_C2=EMPNO
#LT0_DS2_C3=SALARY


# NEW LOGICAL TABLE LT1:
#LT1_DEF=DERBYCOL1 VARCHAR(30), DERBYCOL2 VARCHAR(30)

# Note 'LOCALDERBY' denotes the connection to the local derby database which GaianDB runs on.
# This is a system property and as such its connection properties (DRIVER, URL,...) do not need defining.
LT1_DS0_CONNECTION=LOCALDERBY TABLE1


#############################################################################################
# RDBMS Connection Definitions
#############################################################################################

# DEFINED_GAIAN_CONNECTIONS defines the CSV list of CONNECTION properties for GaianDB nodes to be manually connected to.
# No need to list nodes that are in the same domain in a network that supports multicast as they can be discovered automatically.
#DEFINED_GAIAN_CONNECTIONS=GATEWAY

#GATEWAY_DRIVER=org.apache.derby.jdbc.ClientDriver
#GATEWAY_URL=jdbc:derby://gwhost/gaiandb;create=true
#GATEWAY_USR=gaiandb
#GATEWAY_PWD=????

#DB2_DRIVER=com.ibm.db2.jcc.DB2Driver
#DB2_URL=jdbc:db2://localhost:50000/sample
#DB2_USR=???
#DB2_PWD='km}


#############################################################################################
# MSGBROKER CONFIGURATION:
# GaianDB contains a Message Broker listener which is kicked off if properties MSGBROKER_HOST and 
# MSGBROKER_PORT are set, and if a topic was specified on the command line (using -mt <topic>)
# or by setting property MSGBROKER_TOPIC here.
#
# Broker messages are written to local Derby table 'BROKER_MSGS' under this Gaian Node's
# schema, i.e: 'GAIANDB.BROKER_MSGS'
# To define an expiry period for stored messages, use: MSGSTORER_ROWEXPIRY_HOURS
#
# A message is inserted into the BROKER_MSGS table as follows:
# The topic is stored in its own column and is also split by topic separator '/', and each 
# sub-topic is stored in its own column. The message by default is stored in a single column.
#
# This schema for BROKER_MSGS can be changed to also store decomposed element of the message,
# using property MSGSTORER_MSGCOLS, which is a 'REGEX-like' string used to match message formats,
# and is also capable of matching embedded Timestamp formats.
# Currently the format string can only be used to split messages which have comma delimiters.
#
# It is best explained with an example:
#
# For subscription topic 'transactions/#' and incoming message:
# 'Bristol, John, Smith, 20070919,201554.514, 500' on topic 'transactions/atm/bristol'
#
# And our format string defined as:
# MSGSTORER_MSGCOLS=', FirstName VARCHAR(20), Surname VARCHAR(20), tstamp TIMESTAMP (yyyyMMdd,HHmmss.SSS)'
# 
# BROKER_MSGS will be created with columns:
# TOPIC=<full topic>, T1=atm, T2=bristol, T3=null, T4=null, T5=null, 
# MESSAGE=<full message>, MSG_RECEIVED=<msg insertion time>, Firstname=John, Surname=Smith, tstamp=1190229354514
#############################################################################################

# NOTE! BEFORE ENABLING THESE PROPERTIES, YOU MUST OBTAIN/DOWNLOAD THE IBM MICROBROKER. WHEN YOU HAVE,
# PUT THE FILE 'wmqtt.jar' IN THE GAIANDB INSTALL DIRECTORY.

#MSGBROKER_HOST=host.domain.com
#MSGBROKER_PORT=1883
#MSGBROKER_TOPIC=xyzzy/#
#MSGSTORER_ROWEXPIRY_HOURS=24
#MSGSTORER_MSGCOLS=,,,SENSORTIME TIMESTAMP (yyyyMMdd,HHmmss),,LAT DOUBLE,LNG DOUBLE
#
#BROKER_DEF=TOPIC VARCHAR(50), T1 VARCHAR(20), T2 VARCHAR(20), T3 VARCHAR(20), T4 VARCHAR(20), T5 VARCHAR(20), MSG VARCHAR(256), MSG_RECEIVED TIMESTAMP
#BROKER_DS0_CONNECTION=LOCALDERBY BROKER_MSGS
#############################################################################################


# Note, to show row number with Derby, use ROW_NUMBER() function, e.g: select ROW_NUMBER() OVER () AS R, column1 from LTLOGD
# To get the last log lines: select * from ( select ROW_NUMBER() OVER () R, column1 from LTLOGD ) T order by R desc fetch first 10 rows only
# select count(1) from new com.ibm.db2j.GaianTable('LTLOGD') T
# select ROW_NUMBER() OVER () RID, column1 from LTLOGD offset 3200 rows fetch first 100 rows only
# Get the last 100 lines in each log file in the network:
# select gdb_node, row, column1 log from new com.ibm.db2j.GaianQuery('select * from ( select row_number() over () row, column1 from LTLOGD_0 ) T','with_provenance, order by row desc fetch first 100 rows only') GQ order by gdb_node, row

# Try querying the built-in log files logical table GDB_LTLOG:
# select * from gdb_ltlog

